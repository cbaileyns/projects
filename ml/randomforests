from sklearn import cross_validation

class RandomForest():

    def __init__(self,x,y,meth="class",n=10,j=-1):
        self.type = meth
        self.x_train = None
        self.x_test = None
        self.y_train = None
        self.y_test = None
        self.split(x,y)
        self.y = y
        self.yhat = None
        self.residuals = None
        self.estimators = n
        self.cores = j
    
    def split(self, x, y):
        self.x_train, self.x_test, self.y_train, self.y_test = cross_validation.train_test_split(x, y, test_size=0.2)
    
    def fit(self):
        if self.type == "class":
            from sklearn.ensemble import RandomForestClassifier as rf
        else:
            from sklearn.ensemble import RandomForestRegressor as rf
        m = rf(n_estimators = self.estimators, n_jobs=self.cores)
        f = m.fit(self.x_train, self.y_train)
        self.yhat = f.predict(self.x_test)
        self.residuals = self.yhat - self.y_test
        print "Printing Esimators: /n"
        print f.estimators_
        print "Printing Classes: /n"
        print f.classes_
        print "Printing Number of Classes: /n"
        print f.n_classes_
        print "Features Importances: /n"
        print f.feature_importances_
    
    def eval(self):
        y = pd.DataFrame({'y':self.y_test,'x':self.yhat})
        if self.type == "class":
            tp = len(y.query('x == 1 & y == 1'))
            fp = len(y.query('x == 1 & y == 0'))
            fn = len(y.query('x == 0 & y == 1'))
            tn = len(y.query('x == 0 & y == 0'))
        print 'There are: ' + str(tp) + ' true positives'
        print 'There are: ' + str(fp) + ' false positives'
        print 'There are: ' + str(fn) + ' false negatives'
        print 'There are: ' + str(tn) + ' true negatives'
        fpr, tpr, thresholds = roc_curve(self.y_test, self.yhat, pos_label = 2)
        print tpr
        print fpr
        print thresholds
